
!==============================================================================
subroutine addsource_visc(qdt,ixI^L,ixO^L,iws,qtC,w,qt,wnew)

! Add viscosity source to wnew within ixO 

include 'vacdef.f'

integer::          ixI^L,ixO^L,iws(niw_)
double precision:: qdt,qtC,qt,w(ixG^T,nw),wnew(ixG^T,nw)

integer:: ix,ix^L,idim,idir,jdir,iiw,iw
double precision:: tmp2(ixG^T),nushk(ixG^T,ndim)


double precision:: tmprhoL(ixG^T), tmprhoR(ixG^T), tmprhoC(ixG^T)
double precision:: tmpVL(ixG^T), tmpVR(ixG^T), tmpVC(ixG^T)

double precision:: tmpL(ixG^T),tmpR(ixG^T), tmpC(ixG^T)

double precision:: nuL(ixG^T),nuR(ixG^T)

integer:: jx^L,hx^L, hxO^L

double precision:: c_ene,c_shk

integer:: i,k,l,ii0,ii1,t00


!-----------------------------------------------------------------------------

! Calculating viscosity sources 
! involves second derivatives, two extra layers
call ensurebound(2,ixI^L,ixO^L,qtC,w)
ix^L=ixO^L^LADD1;

!sehr wichtig
call setnushk(w,ix^L,nushk)

do idim=1,ndim
      tmp(ixI^S)=w(ixI^S,rho_)
      call setnu(w,rho_,idim,ixO^L,nuR,nuL)      
      call gradient1L(tmp,ix^L,idim,tmp2)
      tmpL(ixI^S)=(nuL(ixI^S)+nushk(ixI^S,idim))*tmp2(ixI^S)	     
      call gradient1R(tmp,ix^L,idim,tmp2)
      tmpR(ixI^S)=(nuR(ixI^S)+nushk(ixI^S,idim))*tmp2(ixI^S)
      wnew(ixI^S,rho_)=wnew(ixI^S,rho_)+(tmpR(ixI^S)-tmpL(ixI^S))/dx(ixI^S,idim)*qdt
enddo
   

do idim=1,ndim
      tmp(ixI^S)=w(ixI^S,e_)-half*((^C&w(ixI^S,b^C_)**2+)-(^C&w(ixI^S,m^C_)**2+)/(w(ixI^S,rho_)+w(ixI^S,rhob_)))
      call setnu(w,173,idim,ixO^L,nuR,nuL)      
      call gradient1L(tmp,ix^L,idim,tmp2)
      tmpL(ixI^S)=(nuL(ixI^S)+nushk(ixI^S,idim))*tmp2(ixI^S)      
      call gradient1R(tmp,ix^L,idim,tmp2)
      tmpR(ixI^S)=(nuR(ixI^S)+nushk(ixI^S,idim))*tmp2(ixI^S)
      wnew(ixI^S,e_)=wnew(ixI^S,e_)+(tmpR(ixI^S)-tmpL(ixI^S))/dx(ixI^S,idim)*qdt
enddo




      tmprhoC(ixI^S)=w(ixI^S,rho_)+w(ixI^S,rhob_)



do k=1,ndim
        jx^L=ix^L+kr(k,^D); 
        hx^L=ix^L-kr(k,^D);
	tmprhoL(ix^S)=((w(ix^S,rho_)+w(ix^S,rhob_))+(w(hx^S,rho_)+w(hx^S,rhob_)))/two
	tmprhoR(ix^S)=((w(jx^S,rho_)+w(jx^S,rhob_))+(w(ix^S,rho_)+w(ix^S,rhob_)))/two

   do l=1,ndim
	call setnu(w,l+m0_,k,ixO^L,nuR,nuL)      
	tmp(ixI^S)=w(ixI^S,m0_+l)/(w(ixI^S,rho_)+w(ixI^S,rhob_))


      do ii1=0,1
        if (ii1 .eq. 0) then
                           i=k
                           ii0=l
                        else
                           i=l
                           ii0=k
        endif



        if (i .eq. k) then 
           tmpVL(ix^S)=(w(ix^S,m0_+ii0)+w(hx^S,m0_+ii0))/two
	   tmpVR(ix^S)=(w(jx^S,m0_+ii0)+w(ix^S,m0_+ii0))/two

           call gradient1L(tmp,ix^L,k,tmp2)
           tmpL(ixI^S)=(nuL(ixI^S)+nushk(ixI^S,k))*tmp2(ixI^S)
           call gradient1R(tmp,ix^L,k,tmp2)
           tmpR(ixI^S)=(nuR(ixI^S)+nushk(ixI^S,k))*tmp2(ixI^S) 

           tmp2(ixI^S)=(tmprhoR(ixI^S)*tmpR(ixI^S)-tmprhoL(ixI^S)*tmpL(ixI^S))/dx(ixI^S,k)/two
 
	   wnew(ixI^S,m0_+ii0)=wnew(ixI^S,m0_+ii0)+tmp2(ixI^S)*qdt

           tmp2(ixI^S)=(tmpVR(ixI^S)*tmpR(ixI^S)-tmpVL(ixI^S)*tmpL(ixI^S))/dx(ixI^S,k)/two

	   wnew(ixI^S,e_)=wnew(ixI^S,e_)+tmp2(ixI^S)*qdt
	endif




	if (i .ne. k) then
           call gradient1(tmp,ix^L,k,tmp2)
           tmp2(ixI^S)=tmp2(ixI^S)*(nuL(ixI^S)+nuR(ixI^S)+two*nushk(ixI^S,k))/two/two

           tmp(ixI^S)=tmprhoC(ixI^S)*tmp2(ixI^S)
           call gradient1(tmp,ix^L,i,tmpC)

	   wnew(ixI^S,m0_+ii0)=wnew(ixI^S,m0_+ii0)+tmpC(ixI^S)*qdt

           tmp(ixI^S)=w(ixI^S,m0_+ii0)*tmp2(ixI^S)
           call gradient1(tmp,ix^L,i,tmpC)

	   wnew(ixI^S,e_)=wnew(ixI^S,e_)+tmpC(ixI^S)*qdt
	endif

     enddo
    enddo
   enddo


return
end

!=============================================================================
subroutine setnu(w,iw,idim,ix^L,nuR,nuL)

! Set the viscosity coefficient nu within ixO based on w(ixI). 

include 'vacdef.f'

double precision:: w(ixG^T,nw)
double precision:: d1R(ixG^T),d1L(ixG^T)
double precision:: d3R(ixG^T),d3L(ixG^T)
double precision:: md3R(ixG^T),md3L(ixG^T)
double precision:: md1R(ixG^T),md1L(ixG^T)
double precision:: nuR(ixG^T),nuL(ixG^T)

double precision:: c_tot, c_hyp,cmax(ixG^T), tmp_nu(ixG^T)
integer:: ix^L,idim, iw
integer:: kx^L,jx^L,hx^L,gx^L
integer:: ix_1,ix_2,ix_3

logical:: new_cmax

!----------------------------------------------------------------------------


new_cmax=.true.
c_hyp=0.7d0

if (iw .eq. rho_) c_hyp=0.02d0

if (iw .eq. 173) c_hyp=0.02d0
        
       call getcmax(new_cmax,w,ix^L,idim,cmax)
       c_tot=maxval(cmax(ix^S))

        kx^L=ix^L+2*kr(idim,^D); 
        jx^L=ix^L+kr(idim,^D); 
        hx^L=ix^L-kr(idim,^D);
        gx^L=ix^L-2*kr(idim,^D);
  
if (iw .ne. 173) then     
	tmp_nu(ixG^T)=w(ixG^T,iw)
        if (iw.eq.m^D_|.or.) tmp_nu(ixG^T)=w(ixG^T,iw)/(w(ixG^T,rho_)+w(ixG^T,rhob_))
endif



!+w(ixG^T,eb_)
if (iw .eq. 173) tmp_nu(ixG^T)=w(ixG^T,e_)-half*((^C&w(ixG^T,b^C_)**2+)-(^C&w(ixG^T,m^C_)**2+)/(w(ixG^T,rho_)+w(ixG^T,rhob_)))

	
        d3R(ix^S)=abs(3.d0*(tmp_nu(jx^S)-tmp_nu(ix^S))-(tmp_nu(kx^S)-tmp_nu(hx^S)))
        d1R(ix^S)=abs(tmp_nu(jx^S)-tmp_nu(ix^S))

	{do ix_^D=ixmin^D,ixmax^D\}

	  md3R(ix_^D)=maxval(d3R(ix_^D-kr(idim,^D):ix_^D+kr(idim,^D)))
	  md1R(ix_^D)=maxval(d1R(ix_^D-2*kr(idim,^D):ix_^D+2*kr(idim,^D)))

	{enddo\}


	WHERE (md1R(ixG^S).gt.0.d0)
	  nuR(ixG^S)=c_tot*c_hyp*md3R(ixG^S)/md1R(ixG^S)*dx(ixG^S,idim)
	ELSEWHERE 
	  nuR(ixG^S)=0.d0
	END WHERE
        
        maxviscoef=max(maxval(nuR(ixG^T)), maxviscoef)


!************

        d3L(ix^S)=abs(3.d0*(tmp_nu(ix^S)-tmp_nu(hx^S))-(tmp_nu(jx^S)-tmp_nu(gx^S)))
        d1L(ix^S)=abs(tmp_nu(ix^S)-tmp_nu(hx^S))    


	{do ix_^D=ixmin^D,ixmax^D\}

	  md3L(ix_^D)=maxval(d3L(ix_^D-kr(idim,^D):ix_^D+kr(idim,^D)))
	  md1L(ix_^D)=maxval(d1L(ix_^D-2*kr(idim,^D):ix_^D+2*kr(idim,^D)))

	{enddo\}



	WHERE (md1L(ixG^S).gt.0.d0)
	  nuL(ixG^S)=c_tot*c_hyp*md3L(ixG^S)/md1L(ixG^S)*dx(ixG^S,idim)
	ELSEWHERE 
	  nuL(ixG^S)=0.d0  
	END WHERE

        maxviscoef=max(maxval(nuL(ixG^T)), maxviscoef)


return
end


!=============================================================================
!=============================================================================
subroutine setnushk(w,ix^L,nushk)

include 'vacdef.f'

double precision:: w(ixG^T,nw),tmp2(ixG^T),nushk(ixG^T,ndim)
double precision:: c_shk

double precision:: tmp3(ixG^T)

integer:: ix^L,idim, iw,i

integer:: ix_1,ix_2

do idim=1,ndim
nushk(ix^S,idim)=0.d0
enddo


go to 100
c_shk=0.5d0

tmp3(ix^S)=0.d0

!**************************BEGIN shock viscosity*******************************
      do idim=1,ndim
         tmp(ix^S)=w(ix^S,m0_+idim)/(w(ix^S,rho_)+w(ix^S,rhob_))
         call gradient1(tmp,ix^L,idim,tmp2)
         tmp3(ix^S)=tmp3(ix^S)+tmp2(ix^S)
       enddo
      do idim=1,ndim
        nushk(ix^S,idim)=tmp3(ix^S)*(dx(ix^S,idim)**2.d0)*c_shk
	WHERE (tmp3(ix^S) .ge. 0.d0)
!	  nushk(ix^S,idim)=0.d0
	END WHERE
	nushk(ix^S,idim)=abs(nushk(ix^S,idim))
      enddo
!****************************END shock viscosity*******************************

100 continue


return
end






!=============================================================================
subroutine getdt_visc(w,ix^L)

! Check diffusion time limit for dt < dtdiffpar * dx**2 / (nu/rho)

! Based on Hirsch volume 2, p.631, eq.23.2.17

include 'vacdef.f'

double precision:: w(ixG^T,nw),dtdiff_visc
integer:: ix^L,idim, ix_1,ix_2

integer:: aa

! For spatially varying nu you need a common nu array
 double precision::tmpdt(ixG^T), nuL(ixG^T),nuR(ixG^T), nushk(ixG^T,ndim)
 common/visc/nuL
 common/visc/nuR
!-----------------------------------------------------------------------------

   ! For spatially varying nu uncomment the 2 lines below and delete the 3rd
!   call setnu(w,iw,idim,ix^L,nu)


 call setnushk(w,ix^L,nushk)

 do idim=1,ndim

   print*,'idim, maxviscoef=',idim, maxviscoef

   tmpdt(ix^S)=(maxviscoef+nushk(ix^S,idim))!/(w(ix^S,rho_)+w(ix^S,rhob_))   ! ~1/dt
   

!    read*,aa


             dtdiffpar=0.25d0

		
             dtdiff_visc=dtdiffpar/maxval(tmpdt(ix^S)/(dx(ix^S,idim)**2))

!dtdiff_visc=0.5d-4
             {^IFMPI call mpiallreduce(dtdiff_visc,MPI_MIN)}
 
       print*,'dt_code, dt_hyper = ', dt, dtdiff_visc
             dt=min(dt,dtdiff_visc)
	     
	print*,'ndim, dt=', ndim, dt

 end do
 
 maxviscoef=0.d0

return
end

!=============================================================================
subroutine gradientCD4(q,ix^L,idim,gradq)

!!! This subroutine should not use tmp or tmp2

! Calculate 4th order gradient of q within ixL in Cartesian direction idim

!!! We assume uniform Cartesian grid in slab symmetry for now


include 'vacdef.f'

integer:: ix^L,idim
double precision:: q(ixG^T),gradq(ixG^T)

integer:: kx^L,jx^L,hx^L,gx^L
!-----------------------------------------------------------------------------


kx^L=ix^L+2*kr(idim,^D); 
jx^L=ix^L+kr(idim,^D); 
hx^L=ix^L-kr(idim,^D);
gx^L=ix^L-2*kr(idim,^D);

gradq(ix^S)=-(q(kx^S)-8.d0*(q(jx^S)-q(hx^S))-q(gx^S))/dx(ix^S,idim)/12.d0


return
end

!***** 2-point central finite difference gradient******

subroutine gradient1(q,ix^L,idim,gradq)
include 'vacdef.f'
integer:: ix^L,idim
double precision:: q(ixG^T),gradq(ixG^T)
integer:: hx^L,kx^L
!-----------------------------------------------------------------------------

hx^L=ix^L-kr(idim,^D);
kx^L=ix^L+kr(idim,^D);
gradq(ix^S)=(q(kx^S)-q(hx^S))/dx(ix^S,idim)/two

return
end

!=============================================================================


!*****left upwind forward 2-point non-central finite difference gradient******

subroutine gradient1L(q,ix^L,idim,gradq)
include 'vacdef.f'
integer:: ix^L,idim
double precision:: q(ixG^T),gradq(ixG^T)
integer:: hx^L
!-----------------------------------------------------------------------------

hx^L=ix^L-kr(idim,^D);
gradq(ix^S)=(q(ix^S)-q(hx^S))/dx(ix^S,idim)

return
end

!=============================================================================

!*****right upwind forward 2-point non-central finite difference gradient*****

subroutine gradient1R(q,ix^L,idim,gradq)
include 'vacdef.f'
integer:: ix^L,idim
double precision:: q(ixG^T),gradq(ixG^T)
integer:: hx^L
!-----------------------------------------------------------------------------

hx^L=ix^L+kr(idim,^D);
gradq(ix^S)=(q(hx^S)-q(ix^S))/dx(ix^S,idim)


return
end
