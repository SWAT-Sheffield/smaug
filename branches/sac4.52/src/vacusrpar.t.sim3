!##############################################################################
! module vacusr - sim1 ! setvac -d=22 -g=204,204 -p=hdadiab -u=sim1


INCLUDE:vacusr.gravity.t
INCLUDE:vacusr.viscosity.t

!=============================================================================
subroutine specialini(ix^L,w)

include 'vacdef.f'

integer:: ix^L
double precision:: w(ixG^T,1:nw)

double precision:: rhoin,xcent^D,radius
double precision:: inirho,iniene
double precision:: onemor,inix,ddx
double precision:: p_1,p_2

integer:: iii_,iix_1,info,i,j
double precision:: pi,comi,eneu,sum,mode,bmax,l
character*79 atmfilename

integer:: ix_1,ix_2

double precision:: ixc_1,ixc_2
double precision:: rfc,a1,a2


double precision:: bz

!-----------------------------------------------------------------------------

{^IFMPI if (ipe .ne. 0) read(unitpar,'(a)') atmfilename}

{^IFMPI if (ipe .eq. 0) then}
write(*,*)'param load'
read(unitpar,'(a)') atmfilename
write(*,*) 'from file ',atmfilename
open(33,file=atmfilename,status='old')

iniene=731191.34d0*8.31e3*(1.1790001e-11)/0.6d0/(eqpar(gamma_)-1.0)

{^IFMPI endif}

{^IFMPI call MPI_BARRIER(MPI_COMM_WORLD,ierrmpi)}
{^IFMPI call MPI_BCAST(iniene,1,MPI_DOUBLE_PRECISION,0,MPI_COMM_WORLD,ierrmpi)}

do ix_1=ixGhi1,ixGlo1,-1
{^IFMPI if (ipe .eq. 0)} read(33,*) inix,inirho

 print*,'inix,inirho=',inix,inirho


{^IFMPI call MPI_BARRIER(MPI_COMM_WORLD,ierrmpi)}
{^IFMPI call MPI_BCAST(inix,1,MPI_DOUBLE_PRECISION,0,MPI_COMM_WORLD,ierrmpi)}
{^IFMPI call MPI_BCAST(inirho,1,MPI_DOUBLE_PRECISION,0,MPI_COMM_WORLD,ierrmpi)}

 do ix_2=ixGlo2,ixGhi2

   x(ix_1,ix_2,1)=inix*1000.d0
   w(ix_1,ix_2,rho_)=inirho
   w(ix_1,ix_2,e_)=iniene
   w(ix_1,ix_2,m1_)=0.0
   w(ix_1,ix_2,m2_)=0.0

 enddo


enddo
{^IFMPI if (ipe .eq. 0)} close(33)

{^IFMPI if (ipe .eq. 0) } print*,'grav=',eqpar(grav0_),eqpar(grav1_),eqpar(grav2_)





call primitive(ix^L,w)

do ix_2=ixGlo2,ixGhi2
 do ix_1=ixGhi1-1,ixGlo1,-1 

comi=-abs(x(ix_1+1,ix_2,1)-x(ix_1,ix_2,1))

w(ix_1,ix_2,p_)=w(ix_1+1,ix_2,p_)+w(ix_1,ix_2,rho_)*comi*1.d0*eqpar(grav1_)

if (ix_2 .eq. ixGlo2) print*,'eee=',w(ix_1,ix_2,rho_),w(ix_1,ix_2,p_)

 enddo
enddo


!goto 200

do ix_2=ixGlo2,ixGhi2
 do ix_1=ixGlo1+2,ixGhi1-2
       
       w(ix_1,ix_2,rho_)=-(1.D0/eqpar(grav1_))*(1.D0/(12.D0*(x(ix_1+1,ix_2,1)-x(ix_1,ix_2,1))))*(w(ix_1+2,ix_2,p_)-8.D0*w(ix_1+1,ix_2,p_)+8.D0*w(ix_1-1,ix_2,p_)-w(ix_1-2,ix_2,p_))
               
if (ix_2 .eq. ixGlo2) print*,'eeee=',w(ix_1,ix_2,rho_),w(ix_1,ix_2,p_)

     enddo
   enddo



!lower boundary
do ix_1=ixmin1+4,ixmin1+2,-1
  do ix_2=ixmin2,ixmax2
!    do ix_3=ixmin3,ixmax3
!        p_1=w(ix_1+2,ix_2,ix_3,p_)-8.d0*w(ix_1+1,ix_2,ix_3,p_)+8.d0*w(ix_1-1,ix_2,ix_3,p_)
!        p_2=w(ix_1,ix_2,ix_3,rho_)*eqpar(grav1_)
!        w(ix_1-2,ix_2,ix_3,p_) = 12.d0*(x(ix_1,ix_2,ix_3,1)-x(ix_1-1,ix_2,ix_3,1))*p_2+p_1
         p_1=w(ix_1+2,ix_2,p_)-8.d0*w(ix_1+1,ix_2,p_)+8.d0*w(ix_1-1,ix_2,p_)
         p_2=w(ix_1,ix_2,rho_)*eqpar(grav1_)
         w(ix_1-2,ix_2,p_) = 12.d0*(x(ix_1,ix_2,1)-x(ix_1-1,ix_2,1))*p_2+p_1
!       enddo
    enddo
 enddo


!upper boundary
do ix_1=ixmax1-4,ixmax1-2
   do ix_2=ixmin2,ixmax2
!      do ix_3=ixmin3,ixmax3
         
!          p_1=w(ix_1-2,ix_2,ix_3,p_)-8.d0*w(ix_1-1,ix_2,ix_3,p_)+8.d0*w(ix_1+1,ix_2,ix_3,p_)
!          p_2=w(ix_1,ix_2,ix_3,rho_)*eqpar(grav1_)
!          w(ix_1+2,ix_2,ix_3,p_) = -12.d0*(x(ix_1,ix_2,ix_3,1)-x(ix_1-1,ix_2,ix_3,1))*p_2+p_1
           p_1=w(ix_1-2,ix_2,p_)-8.d0*w(ix_1-1,ix_2,p_)+8.d0*w(ix_1+1,ix_2,p_)
           p_2=w(ix_1,ix_2,rho_)*eqpar(grav1_)
           w(ix_1+2,ix_2,p_) = -12.d0*(x(ix_1,ix_2,1)-x(ix_1-1,ix_2,1))*p_2+p_1
      enddo
   enddo
!enddo


200 continue



call conserve(ix^L,w)




w(ix^S,eb_)=w(ix^S,e_)
w(ix^S,e_)=0.d0

w(ix^S,rhob_)=w(ix^S,rho_)
w(ix^S,rho_)=0.d0

!go to 300


do i=0,100

  call RANDOM_NUMBER(a1)
  ixc_1=a1*(x(ixmax1,ixmin2,1)-x(ixmin1,ixmin2,1))
  call RANDOM_NUMBER(a1)
  ixc_2=a1*(x(ixmin1,ixmax2,2)-x(ixmin1,ixmin2,2))
  call RANDOM_NUMBER(a1)
  call RANDOM_NUMBER(a2)
  

  do ix_1=ixmin1,ixmax1
   do ix_2=ixmin2,ixmax2

     rfc=(x(ix_1,ix_2,1)-ixc_1)**2.d0+(x(ix_1,ix_2,2)-ixc_2)**2.d0
!     w(ix_1,ix_2,m1_)=w(ix_1,ix_2,m1_)+10.d0*(w(ix_1,ix_2,rho_)+w(ix_1,ix_2,rhob_))*(a1-0.5d0)*exp(-rfc/((0.05d0*1e6)**2.d0))
!     w(ix_1,ix_2,m2_)=w(ix_1,ix_2,m2_)+10.d0*(w(ix_1,ix_2,rho_)+w(ix_1,ix_2,rhob_))*(a2-0.5d0)*exp(-rfc/((0.05d0*1e6)**2.d0))

   enddo
  enddo

enddo

!go to 300

!w(ix^S,b1_)=1.d0
print*, 'min******',ixmin1,ixmax1
  do ix_1=ixmin1,ixmax1
   do ix_2=ixmin2,ixmax2


    

!     if (ix_1 .lt. (ixmax2-ixmin2)/2.d0+ixmin2) w(ix_1,ix_2,b1_)=-0.4d0
     if (ix_1 .ge. 151) w(ix_1,ix_2,b2_)=0.4d0 ! goriz

!     w(ix_1,ix_2,b2_)=0.4d0 !-0.1d0+0.2d0*ix_2/ixmax2


   enddo
  enddo
  
w(150,ixmin2:ixmax2,b2_)=0.3d0  ! goriz
w(149,ixmin2:ixmax2,b2_)=0.2d0   ! goriz
w(148,ixmin2:ixmax2,b2_)=0.1d0   ! goriz

!w(ixmin1:ixmax1,(ixmax2-ixmin2)/2.d0+ixmin2+1,b2_)=0.0d0
!w(ixmin1:ixmax1,(ixmax2-ixmin2)/2.d0+ixmin2+2,b1_)=0.2d0

!w(ix^S,b2_)=0.d0

w(ix^S,b1_)=0.d0


w(ix^S,eb_)=w(ix^S,eb_)-(w(ix^S,b1_)**2.d0+w(ix^S,b2_)**2.d0)*(1.d0-eqpar(gamma_)/2.d0)/(eqpar(gamma_)-1.d0)

w(ix^S,bg1_)=w(ix^S,b1_)
w(ix^S,bg2_)=w(ix^S,b2_)
w(ix^S,b1_)=0.d0
w(ix^S,b2_)=0.d0





300 continue

return
end


!=============================================================================
subroutine specialsource(qdt,ixI^L,ixO^L,iws,qtC,wCT,qt,w)


include 'vacdef.f'

integer:: ixI^L,ixO^L,iws(niw_)
double precision:: qdt,qtC,qt,wCT(ixG^T,nw),w(ixG^T,nw)
double precision:: fdt,fdthalf2

double precision:: pre(ixG^T),tem(ixG^T),kapr(ixG^T),so(ixG^T),flux(ixG^T)
double precision:: tau(ixG^T),ine(ixG^T)

double precision:: preg(ixG^T),pret(ixG^T)

integer:: rix_1,i,j
double precision:: mol_0, rrr_

double precision:: fsokr,avgflux

integer:: iw,iiw,iix_1

integer:: ix_1,ix_2


double precision:: s_period,xc1,xc2,s_rad1,s_rad2,vvv,r1,r2
 

!*****************
double precision:: t01,t02,a1,a2,s1,s2,sf,rad,rfc,sdep,tdep,sigma2


!-----------------------------------------------------------------------------


eqpar(eta_)=0.d0

!call addsource_diff(qdt,ixI^L,ixO^L,iws,qtC,wCT,qt,w)

eqpar(nu_)=1.0d0
!eqpar(nu_)=0.d0

call addsource_grav(qdt,ixI^L,ixO^L,iws,qtC,wCT,qt,w)



if(abs(eqpar(nu_))>smalldouble)&
   call addsource_visc(qdt,ixI^L,ixO^L,iws,qtC,wCT,qt,w)
 



s_period=300.d0
xc1=0.5d6 !m
xc2=4.d6  !m
s_rad1=0.05d6 !m
s_rad2=1.0d6 !m
 
do ix_1=ixImin1,ixImax1
 do ix_2=ixImin2,ixImax2


     r1=(x(ix_1,ix_2,1)-xc1)**2.d0
     r2=(x(ix_1,ix_2,2)-xc2)**2.d0
   
     tdep=sin(qt*2.d0*pi/s_period)

     vvv=20.d0*tdep*exp(-r1/s_rad1**2.d0-r2/s_rad2**2.d0)


     w(ix_1,ix_2,e_)=w(ix_1,ix_2,e_)+(w(ix_1,ix_2,rho_)+w(ix_1,ix_2,rhob_))*(vvv**2.d0)*qdt/2.d0
     w(ix_1,ix_2,m1_)=w(ix_1,ix_2,m1_)+(w(ix_1,ix_2,rho_)+w(ix_1,ix_2,rhob_))*vvv*qdt


 enddo
enddo



{^IFMPI if (ipe.eq.0)} write(*,*) '***time=',qt






end



!=============================================================================
subroutine specialbound(qt,ix^L,iw,iB,w)
include 'vacdef.f'

integer:: ix_1,ix_2

integer:: iw^LIM,idim^LIM
double precision:: qt,w(ixG^T,1:nw)
integer:: ix,ix^D,ixe,ixf,ix^L,ixpair^L,idim,iw,iB
integer:: iwv,jdim

integer:: Ns,i,j
double precision:: ki


double precision:: tmpp1,tmpp2

Ns=1

select case(iB)

case(1)

case(2)


case default
stop 'error iB!'
end select

return
end

!=============================================================================
subroutine getdt_special(w,ix^L)

! If the Coriolis force is made very strong it may require time step limiting,
! but this is not implemented here.

include 'vacdef.f'
double precision:: w(ixG^T,nw)
integer:: ix^L
!-----------------------------------------------------------------------------

!call getdt_diff(w,ix^L)


if(abs(eqpar(nu_))>smalldouble)&
   call getdt_visc(w,ix^L)


call getdt_grav(w,ix^L)

return
end


subroutine specialeta(w,ix^L,idirmin)
 
include 'vacdef.f'
 
double precision:: w(ixG^T,nw)
integer:: ix^L,idirmin
!-----------------------------------------------------------------------------
 
stop 'specialeta is not defined'
end

